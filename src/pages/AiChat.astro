---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';
---

<Layout title="Blockchain4Indonesia">
  <div id="vanta-background"></div>
  <div id="container">
    <Navigation />
    <main>
      <section id="ai-chat" class="ai-chat-section">
        <div class="chat-container">
          <div class="chat-header">
            <h1>Chat With AI</h1>
            <button type="reset" class="reset-btn" onClick="window.location.reload();">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 12a9 9 0 1 1 9 9 9.75 9.75 0 0 1-6.74-2.74"></path>
                <path d="M3 12h9"></path>
              </svg>
              Reset Chat
            </button>
          </div>
          <div class="chat-messages" id="chatMessages">
            <div class="welcome-message">
              <div class="welcome-icon">ðŸ¤–</div>
              <h2>Hello How can I assist you today?</h2>
              <p>Feel free to ask me anything about blockchain technology</p>
            </div>
          </div>
          <div class="chat-input-container">
            <div class="chat-input-wrapper">
              <textarea 
                id="chatInput" 
                rows="1" 
                placeholder="Type your message here..."
                class="chat-input"
              ></textarea>
              <button id="sendButton" class="send-button" aria-label="Send message">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="22" y1="2" x2="11" y2="13"></line>
                  <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                </svg>
              </button>
            </div>
            <p class="input-info">Powered by Gemini AI</p>
          </div>
        </div>
      </section>
    </main>
  </div>
    <Footer />
</Layout>

<style>
  :root {
    --primary-color: #ff0000;
    --primary-light: #ff4444;
    --background-dark: #000000;
    --text-light: #ffffff;
    --text-muted: rgba(255, 255, 255, 0.6);
    --transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --container-width: 1000px;
    --border-radius: 16px;
  }

  .chat-container {
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius);
    max-width: var(--container-width);
    width: 95%;
    margin: 2rem auto;
    height: calc(100vh - 180px);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .chat-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .chat-header h1 {
    font-size: 1.5rem;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin: 0;
  }

  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 2rem;
    scroll-behavior: smooth;
  }

  .welcome-message {
    text-align: center;
    padding: 3rem 1rem;
  }

  .welcome-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    animation: bounce 2s infinite;
  }

  .welcome-message h2 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .welcome-message p {
    color: var(--text-muted);
    font-size: 1.1rem;
  }

  .message {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 12px;
    animation: fadeIn 0.3s ease;
  }

  .message.user {
    background: rgba(255, 255, 255, 0.05);
    margin-left: 2rem;
  }

  .message.assistant {
    background: rgba(255, 0, 0, 0.05);
    margin-right: 2rem;
  }

  .message-wrapper {
    display: flex;
    gap: 1rem;
    width: 100%;
  }

  .profile-icon {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.1);
    font-size: 1.2rem;
  }

  .message-content {
    flex: 1;
    line-height: 1.6;
    color: var(--text-light);
  }

  .message-timestamp {
    font-size: 0.8rem;
    color: var(--text-muted);
    margin-left: auto;
    align-self: flex-end;
  }

  .chat-input-container {
    padding: 1.5rem;
    background: rgba(0, 0, 0, 0.3);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .chat-input-wrapper {
    display: flex;
    align-items: flex-end;
    gap: 0.75rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 0.75rem;
    transition: var(--transition);
  }

  .chat-input-wrapper:focus-within {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.1);
  }

  .chat-input {
    flex: 1;
    background: transparent;
    border: none;
    color: var(--text-light);
    font-size: 1rem;
    resize: none;
    max-height: 150px;
    padding: 0.5rem;
    outline: none;
    line-height: 1.5;
  }

  .chat-input::placeholder {
    color: var(--text-muted);
  }

  .reset-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: transparent;
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: var(--transition);
  }

  .reset-btn:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-1px);
  }

  .send-button {
    background: var(--primary-color);
    border: none;
    border-radius: 8px;
    width: 40px;
    height: 40px;
    cursor: pointer;
    transition: var(--transition);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .send-button:hover {
    background: var(--primary-light);
    transform: translateY(-1px);
  }

  .send-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input-info {
    text-align: center;
    font-size: 0.8rem;
    color: var(--text-muted);
    margin-top: 0.75rem;
  }

  .loading {
    display: flex;
    gap: 0.5rem;
    padding: 1rem;
    color: var(--text-muted);
    align-items: center;
    justify-content: center;
  }

  .loading span {
    width: 8px;
    height: 8px;
    background: var(--primary-color);
    border-radius: 50%;
    animation: bounce 0.5s ease infinite;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
  }

  @media (max-width: 768px) {
    .chat-container {
      height: calc(100vh - 140px);
      width: 100%;
      margin: 1rem 0;
      border-radius: 0;
    }

    .chat-header {
      padding: 1rem;
    }

    .chat-header h1 {
      font-size: 1.2rem;
    }

    .chat-messages {
      padding: 1rem;
    }

    .welcome-message {
      padding: 2rem 1rem;
    }

    .welcome-message h2 {
      font-size: 1.4rem;
    }

    .message {
      margin: 0.75rem 0;
    }

    .chat-input-container {
      padding: 1rem;
    }
  }
</style>

<script>
import Swal from 'sweetalert2';

interface ChatElements {
  messages: HTMLElement | null;
  input: HTMLTextAreaElement | null;
  button: HTMLButtonElement | null;
}

const elements: ChatElements = {
  messages: document.getElementById('chatMessages'),
  input: document.getElementById('chatInput') as HTMLTextAreaElement,
  button: document.getElementById('sendButton') as HTMLButtonElement
};

// Input validation constants
const CONSTRAINTS = {
  MAX_LENGTH: 1000,
  MIN_LENGTH: 1
};

// Auto-resize textarea
elements.input?.addEventListener('input', () => {
  if (!elements.input) return;
  elements.input.style.height = 'auto';
  elements.input.style.height = `${elements.input.scrollHeight}px`;
});

function validateInput(message: string): { isValid: boolean; error?: string } {
  if (!message) {
    return { isValid: false, error: 'Your Input is Empty' };
  }
  if (message.length >= CONSTRAINTS.MAX_LENGTH) {
    return { isValid: false, error: 'Your Input is Too Long' };
  }
  if (!/\S/.test(message)) {
    return { isValid: false, error: 'Your Input is Invalid' };
  }
  return { isValid: true };
}

function showError(title: string, text: string): void {
  Swal.fire({
    icon: 'error',
    title,
    text
  });
}

function createMessageElement(content: string, isUser: boolean): HTMLDivElement {
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${isUser ? 'user' : 'assistant'}`;

  const wrapper = document.createElement('div');
  wrapper.className = 'message-wrapper';

  const profileIcon = document.createElement('div');
  profileIcon.className = 'profile-icon';
  profileIcon.textContent = isUser ? 'ðŸ‘¤' : 'ðŸ¤–';

  const contentDiv = document.createElement('div');
  contentDiv.className = 'message-content';
  contentDiv.textContent = content;

  const timestamp = document.createElement('span');
  timestamp.className = 'message-timestamp';
  timestamp.textContent = new Date().toLocaleTimeString([], { 
    hour: '2-digit', 
    minute: '2-digit' 
  });

  wrapper.append(profileIcon, contentDiv, timestamp);
  messageDiv.appendChild(wrapper);
  return messageDiv;
}

function addLoadingIndicator(): HTMLDivElement {
  const loadingDiv = document.createElement('div');
  loadingDiv.className = 'loading';
  loadingDiv.innerHTML = '<span></span><span></span><span></span>';
  elements.messages?.appendChild(loadingDiv);
  elements.messages?.scrollTo({ 
    top: elements.messages.scrollHeight, 
    behavior: 'smooth' 
  });
  return loadingDiv;
}

async function sendMessage(): Promise<void> {
  const message = elements.input?.value.trim() ?? '';
  const validation = validateInput(message);
  
  if (!validation.isValid) {
    showError(validation.error!, 'Please try again');
    return;
  }

  // Reset input state
  if (elements.input) {
    elements.input.value = '';
    elements.input.style.height = 'auto';
  }
  if (elements.button) elements.button.disabled = true;

  // Add user message and loading indicator
  elements.messages?.appendChild(createMessageElement(message, true));
  const loadingDiv = addLoadingIndicator();

  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message })
    });

    if (!response.ok) throw new Error('Network response was not ok');

    const data = await response.json();
    loadingDiv.remove();
    elements.messages?.appendChild(createMessageElement(data.response, false));

  } catch (error) {
    console.error('Error:', error);
    loadingDiv.remove();
    showError('Something Went Wrong', 'Please try again later');
  } finally {
    if (elements.button) elements.button.disabled = false;
    if (elements.input) elements.input.focus();
  }
}

// Event listeners
elements.button?.addEventListener('click', sendMessage);
elements.input?.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

// Initialize VANTA background
document.addEventListener('DOMContentLoaded', () => {
  if (typeof VANTA?.NET === 'undefined') {
    console.warn('VANTA.NET not loaded');
    return;
  }

  VANTA.NET({
    el: "#vanta-background",
    mouseControls: true,
    touchControls: true,
    gyroControls: false,
    minHeight: 200.00,
    minWidth: 200.00,
    scale: 1.00,
    scaleMobile: 1.00,
    color: 0xff0000,
    backgroundColor: 0x000000,
    points: 8,
    maxDistance: 25.00,
    spacing: 15.00
  });
});
</script>